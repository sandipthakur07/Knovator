stages:
  - test
  - security
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

test:frontend:
  stage: test
  image: node:18-alpine
  script:
    - cd frontend
    - npm ci
    - npm run test -- --coverage --watchAll=false
  artifacts:
    reports:
      coverage: frontend/coverage/cobertura-coverage.xml
  only:
    - branches

test:backend:
  stage: test
  image: node:18-alpine
  script:
    - cd backend
    - npm ci
    - npm test
  only:
    - branches

security:audit:
  stage: security
  image: node:18-alpine
  script:
    - cd frontend && npm audit --audit-level moderate
    - cd ../backend && npm audit --audit-level moderate
  allow_failure: true
  only:
    - branches

build:docker:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CONTAINER_IMAGE .
    - docker push $CONTAINER_IMAGE
  only:
    - main
    - develop

deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $STAGING_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - ssh $STAGING_USER@$STAGING_SERVER_IP "
        cd /opt/app &&
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker pull $CONTAINER_IMAGE &&
        docker tag $CONTAINER_IMAGE app:latest &&
        docker-compose up -d
      "
  environment:
    name: staging
    url: https://staging.yourdomain.com
  only:
    - develop

deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PROD_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $PROD_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - ssh $PROD_USER@$PROD_SERVER_IP "
        cd /opt/app &&
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker pull $CONTAINER_IMAGE &&
        docker tag $CONTAINER_IMAGE app:latest &&
        docker-compose up -d
      "
  environment:
    name: production
    url: https://yourdomain.com
  when: manual
  only:
    - main
