version: '3.8'

services:
  # Nginx Web Server
  nginx:
    image: nginx:1.24-alpine
    container_name: laravel_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./laravel:/var/www/html:ro
      - ./docker/nginx/laravel.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - laravel-network
    depends_on:
      - php-fpm

  # PHP-FPM Application Server (can be scaled)
  php-fpm:
    build:
      context: ./docker/php
      dockerfile: Dockerfile
    container_name: laravel_php_fpm
    restart: unless-stopped
    volumes:
      - ./laravel:/var/www/html
    networks:
      - laravel-network
    environment:
      - DB_HOST=mysql-master
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis-master
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
    depends_on:
      - mysql-master
      - redis-master
    deploy:
      replicas: 3

  # Queue Worker
  queue-worker:
    build:
      context: ./docker/php
      dockerfile: Dockerfile
    container_name: laravel_queue_worker
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    volumes:
      - ./laravel:/var/www/html
    networks:
      - laravel-network
    environment:
      - DB_HOST=mysql-master
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis-master
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - mysql-master
      - redis-master
    deploy:
      replicas: 2

  # MySQL Master Database
  mysql-master:
    image: mysql:8.0
    container_name: mysql_master
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql_master_data:/var/lib/mysql
      - ./docker/mysql/master.cnf:/etc/mysql/conf.d/master.cnf:ro
    networks:
      - laravel-network
    ports:
      - "3306:3306"

  # MySQL Slave Database (Read Replica)
  mysql-slave:
    image: mysql:8.0
    container_name: mysql_slave
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql_slave_data:/var/lib/mysql
      - ./docker/mysql/slave.cnf:/etc/mysql/conf.d/slave.cnf:ro
    networks:
      - laravel-network
    depends_on:
      - mysql-master

  # Redis Master
  redis-master:
    image: redis:7-alpine
    container_name: redis_master
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_master_data:/data
    networks:
      - laravel-network
    ports:
      - "6379:6379"

  # Redis Sentinel for High Availability
  redis-sentinel:
    image: redis:7-alpine
    container_name: redis_sentinel
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./docker/redis/sentinel.conf:/etc/redis/sentinel.conf:ro
    networks:
      - laravel-network
    depends_on:
      - redis-master

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - laravel-network
    ports:
      - "9200:9200"

  # Kibana (Optional - for Elasticsearch management)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - laravel-network
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

networks:
  laravel-network:
    driver: bridge

volumes:
  mysql_master_data:
  mysql_slave_data:
  redis_master_data:
  elasticsearch_data:
